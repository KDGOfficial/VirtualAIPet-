#include "PetAI.h"
#include <algorithm>

static std::string toLower(std::string s) {
    std::transform(s.begin(), s.end(), s.begin(), [](unsigned char c){ return std::tolower(c); });
    return s;
}

PetAI::PetAI() {}

std::string PetAI::respond(const std::string &userInput, const PetState &state) {
    return ruleRespond(toLower(userInput), state);
}

std::string PetAI::ruleRespond(const std::string &u, const PetState &state) {
    if (u.find("–ø—Ä–∏–≤–µ—Ç") != std::string::npos || u.find("hello") != std::string::npos) {
        return "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü üòä";
    }
    if (u.find("–∫–∞–∫") != std::string::npos && u.find("–¥–µ–ª–∞") != std::string::npos) {
        return "–Ø: hunger=" + std::to_string(state.hunger) + " energy=" + std::to_string(state.energy) + " happy=" + std::to_string(state.happiness);
    }
    if (u.find("–∫–æ—Ä–º") != std::string::npos || u.find("feed") != std::string::npos) {
        return "–°–ø–∞—Å–∏–±–æ! –Ø –ª—é–±–ª—é –µ–¥—É.";
    }
    if (u.find("—Å–ø–∞—Ç—å") != std::string::npos || u.find("sleep") != std::string::npos) {
        return "–•–æ—á—É –ø–æ—Å–ø–∞—Ç—å... zzz";
    }
    if (u.size() < 4) return "–ú—è—É?";
    return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... —Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë!";
}